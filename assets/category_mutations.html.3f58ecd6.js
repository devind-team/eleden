import{_ as t,o as e,c as a,e as s}from"./app.6fb3dce6.js";const r={},i=s('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-category-mutations" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-category-mutations" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C category_mutations</h1><h2 id="\u043A\u043B\u0430\u0441\u0441-addcategorymutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-addcategorymutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 AddCategoryMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u044F \u0434\u043B\u044F \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload(root, info: graphql.execution.base.ResolveInfo, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, AddCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changecategorymutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changecategorymutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeCategoryMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u0438 \u0434\u043B\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-1" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-1" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, category_id: str, text: str, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, ChangeCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changecategoryavatarmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changecategoryavatarmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeCategoryAvatarMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u044F \u0434\u043B\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-2" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-2" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, category_id: str, avatar: django.core.files.uploadedfile.InMemoryUploadedFile, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, ChangeCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changecategorypositionmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changecategorypositionmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeCategoryPositionMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u044F \u0434\u043B\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u043F\u043E\u0440\u044F\u0434\u043A\u0430 \u0441\u043B\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u044F \u0432\u044B\u0432\u043E\u0434\u0430 \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-3" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-3" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, categories_id: List[str], *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, ChangeAbsoluteCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changecategoryparentmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changecategoryparentmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeCategoryParentMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u044F \u0434\u043B\u044F \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0440\u043E\u0434\u0438\u0442\u0435\u043B\u044F</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-4" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-4" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, category_id: str, parent_id: str, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, ChangeAbsoluteCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-deletecategorymutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-deletecategorymutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 DeleteCategoryMutation</h2><p>\u041C\u0443\u0442\u0430\u0446\u0438\u044F \u0434\u043B\u044F \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u044F \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u0438</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-5" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-5" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, category_id: str, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes([IsAuthenticated, DeleteCategory])&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-categorymutations" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-categorymutations" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 CategoryMutations</h2><p>Object Type Definition Almost all of the GraphQL types you define will be object types. Object types have a name, but most importantly describe their fields. The name of the type defined by an <em>ObjectType</em> defaults to the class name. The type description defaults to the class docstring. This can be overriden by adding attributes to a Meta inner class. The class attributes of an <em>ObjectType</em> are mounted as instances of <code>graphene.Field</code>. Methods starting with <code>resolve_&lt;field_name&gt;</code> are bound as resolvers of the matching Field name. If no resolver is provided, the default resolver is used. Ambiguous types with Interface and Union can be determined through<code>is_type_of</code> method and <code>Meta.possible_types</code> attribute. .. code:: python from graphene import ObjectType, String, Field class Person(ObjectType): class Meta: description = &#39;A human&#39; # implicitly mounted as Field first_name = String() # explicitly mounted as Field last_name = Field(String) def resolve_last_name(parent, info): return last_name ObjectType must be mounted using <code>graphene.Field</code>. .. code:: python from graphene import ObjectType, Field class Query(ObjectType): person = Field(Person, description=&quot;My favorite person&quot;) Meta class options (optional): name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with this object. all fields from interface will be included in this object&#39;s schema. possible_types (Iterable[class]): Used to test parent value object via isintance to see if this type can be used to resolve an ambigous type (interface, union). default_resolver (any Callable resolver): Override the default resolver for this type. Defaults to graphene default resolver which returns an attribute or dictionary key with the same name as the field. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes). An <em>ObjectType</em> can be used as a simple value object by creating an instance of the class. .. code:: python p = Person(first_name=&#39;Bob&#39;, last_name=&#39;Roberts&#39;) assert p.first_name == &#39;Bob&#39; Args: *args (List[Any]): Positional values to use for Field values of value object **kwargs (Dict[str: Any]): Keyword arguments to use for Field values of value object</p>',27),o=[i];function n(l,d){return e(),a("div",null,o)}var c=t(r,[["render",n],["__file","category_mutations.html.vue"]]);export{c as default};
