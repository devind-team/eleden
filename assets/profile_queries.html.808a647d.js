import{_ as e,o as t,c as s,e as a}from"./app.6fb3dce6.js";const i={},r=a('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-profile-queries" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-profile-queries" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C profile_queries</h1><h2 id="\u043A\u043B\u0430\u0441\u0441-profilequeries" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-profilequeries" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ProfileQueries</h2><p>Object Type Definition Almost all of the GraphQL types you define will be object types. Object types have a name, but most importantly describe their fields. The name of the type defined by an <em>ObjectType</em> defaults to the class name. The type description defaults to the class docstring. This can be overriden by adding attributes to a Meta inner class. The class attributes of an <em>ObjectType</em> are mounted as instances of <code>graphene.Field</code>. Methods starting with <code>resolve_&lt;field_name&gt;</code> are bound as resolvers of the matching Field name. If no resolver is provided, the default resolver is used. Ambiguous types with Interface and Union can be determined through<code>is_type_of</code> method and <code>Meta.possible_types</code> attribute. .. code:: python from graphene import ObjectType, String, Field class Person(ObjectType): class Meta: description = &#39;A human&#39; # implicitly mounted as Field first_name = String() # explicitly mounted as Field last_name = Field(String) def resolve_last_name(parent, info): return last_name ObjectType must be mounted using <code>graphene.Field</code>. .. code:: python from graphene import ObjectType, Field class Query(ObjectType): person = Field(Person, description=&quot;My favorite person&quot;) Meta class options (optional): name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with this object. all fields from interface will be included in this object&#39;s schema. possible_types (Iterable[class]): Used to test parent value object via isintance to see if this type can be used to resolve an ambigous type (interface, union). default_resolver (any Callable resolver): Override the default resolver for this type. Defaults to graphene default resolver which returns an attribute or dictionary key with the same name as the field. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes). An <em>ObjectType</em> can be used as a simple value object by creating an instance of the class. .. code:: python p = Person(first_name=&#39;Bob&#39;, last_name=&#39;Roberts&#39;) assert p.first_name == &#39;Bob&#39; Args: *args (List[Any]): Positional values to use for Field values of value object **kwargs (Dict[str: Any]): Keyword arguments to use for Field values of value object</p>',3),o=[r];function n(l,c){return t(),s("div",null,o)}var p=e(i,[["render",n],["__file","profile_queries.html.vue"]]);export{p as default};
