import{_ as e,o as t,c as a,e as s}from"./app.6fb3dce6.js";const i={},l=s('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-team-mutations" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-team-mutations" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C team_mutations</h1><h2 id="\u043A\u043B\u0430\u0441\u0441-addteammutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-addteammutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 AddTeamMutation</h2><p>\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u0433\u0440\u0443\u043F\u043F\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload(cls, root, info: graphql.execution.base.ResolveInfo, **kwargs)</td><td style="text-align:left;">[&#39;classmethod&#39;, &#39;permission_classes((IsAuthenticated, AddTeam))&#39;, &#39;resolve_classes((Team,))&#39;, &#39;validation_classes((TeamValidator,))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-uploadteamsmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-uploadteamsmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 UploadTeamsMutation</h2><p>\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0433\u0440\u0443\u043F\u043F \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-1" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-1" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, file: django.core.files.uploadedfile.InMemoryUploadedFile)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated, AddTeam))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changeteammutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changeteammutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeTeamMutation</h2><p>\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0433\u0440\u0443\u043F\u043F\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-2" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-2" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( cls, root, info: graphql.execution.base.ResolveInfo, team_id: str, **kwargs)</td><td style="text-align:left;">[&#39;classmethod&#39;, &#39;permission_classes((IsAuthenticated, ChangeTeam))&#39;, &#39;resolve_classes((Team,))&#39;, &#39;validation_classes((TeamChangeValidator,), deferred=True)&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changeteamresponsibleusersmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changeteamresponsibleusersmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeTeamResponsibleUsersMutation</h2><p>\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0432 \u0433\u0440\u0443\u043F\u043F\u0435</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-3" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-3" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, team_id: str, users_id: list[str])</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated, ChangeTeam))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changeteameduprogrammutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changeteameduprogrammutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeTeamEduProgramMutation</h2><p>\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0439 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u0434\u043B\u044F \u0433\u0440\u0443\u043F\u043F\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-4" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-4" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, team_id: str, transfer_courses: bool, edu_program_id: Optional[str])</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated, ChangeTeam))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-changeteamdeletemutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-changeteamdeletemutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChangeTeamDeleteMutation</h2><p>\u041C\u044F\u0433\u043A\u043E\u0435 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u0438\u043B\u0438 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435 \u0433\u0440\u0443\u043F\u043F\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-5" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-5" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, team_id: str, delete: bool)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated, DeleteTeam))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-generateteamnewpasswordsmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-generateteamnewpasswordsmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 GenerateTeamNewPasswordsMutation</h2><p>\u0413\u0435\u043D\u0435\u0440\u0430\u0446\u0438\u044F \u043F\u0430\u0440\u043E\u043B\u0435\u0439 \u0437\u0430\u0434\u0430\u043D\u043D\u044B\u043C \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F\u043C</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-6" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-6" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, team_id: str, users_id: list[str], date: str)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated, ChangeTeam))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-unloadusersmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-unloadusersmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 UnloadUsersMutation</h2><p>\u0412\u044B\u0433\u0440\u0443\u0437\u043A\u0430 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0433\u0440\u0443\u043F\u043F\u044B</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-7" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-7" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mutate_and_get_payload( root, info: graphql.execution.base.ResolveInfo, extension: str, users_id: list[str], team_id: str)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &#39;permission_classes((IsAuthenticated,))&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-teammutations" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-teammutations" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 TeamMutations</h2><p>Object Type Definition Almost all of the GraphQL types you define will be object types. Object types have a name, but most importantly describe their fields. The name of the type defined by an <em>ObjectType</em> defaults to the class name. The type description defaults to the class docstring. This can be overriden by adding attributes to a Meta inner class. The class attributes of an <em>ObjectType</em> are mounted as instances of <code>graphene.Field</code>. Methods starting with <code>resolve_&lt;field_name&gt;</code> are bound as resolvers of the matching Field name. If no resolver is provided, the default resolver is used. Ambiguous types with Interface and Union can be determined through<code>is_type_of</code> method and <code>Meta.possible_types</code> attribute. .. code:: python from graphene import ObjectType, String, Field class Person(ObjectType): class Meta: description = &#39;A human&#39; # implicitly mounted as Field first_name = String() # explicitly mounted as Field last_name = Field(String) def resolve_last_name(parent, info): return last_name ObjectType must be mounted using <code>graphene.Field</code>. .. code:: python from graphene import ObjectType, Field class Query(ObjectType): person = Field(Person, description=&quot;My favorite person&quot;) Meta class options (optional): name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with this object. all fields from interface will be included in this object&#39;s schema. possible_types (Iterable[class]): Used to test parent value object via isintance to see if this type can be used to resolve an ambigous type (interface, union). default_resolver (any Callable resolver): Override the default resolver for this type. Defaults to graphene default resolver which returns an attribute or dictionary key with the same name as the field. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes). An <em>ObjectType</em> can be used as a simple value object by creating an instance of the class. .. code:: python p = Person(first_name=&#39;Bob&#39;, last_name=&#39;Roberts&#39;) assert p.first_name == &#39;Bob&#39; Args: *args (List[Any]): Positional values to use for Field values of value object **kwargs (Dict[str: Any]): Keyword arguments to use for Field values of value object</p>',35),n=[l];function d(r,o){return t(),a("div",null,n)}var c=e(i,[["render",d],["__file","team_mutations.html.vue"]]);export{c as default};
