import{_ as e,o as t,c as a,e as r}from"./app.6fb3dce6.js";const l={},i=r('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-test-mutations-edu-programs" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-test-mutations-edu-programs" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C test_mutations_edu_programs</h1><h3 id="\u0444\u0443\u043D\u043A\u0446\u0438\u0438" tabindex="-1"><a class="header-anchor" href="#\u0444\u0443\u043D\u043A\u0446\u0438\u0438" aria-hidden="true">#</a> \u0424\u0443\u043D\u043A\u0446\u0438\u0438</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">mock_info()</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-eduprogrammodelserializer" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduprogrammodelserializer" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduProgramModelSerializer</h2><p>A <code>ModelSerializer</code> is just a regular <code>Serializer</code>, except that: * A set of default fields are automatically populated. * A set of default validators are automatically populated. * Default <code>.create()</code> and <code>.update()</code> implementations are provided. The process of automatically determining a set of serializer fields based on the model fields is reasonably complex, but you almost certainly don&#39;t need to dig into the implementation. If the <code>ModelSerializer</code> class <em>doesn&#39;t</em> generate the set of fields that you need you should either declare the extra/differing fields explicitly on the serializer class, or simply use a <code>Serializer</code> class.</p><h2 id="\u043A\u043B\u0430\u0441\u0441-eduformmodelserializer" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduformmodelserializer" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduFormModelSerializer</h2><p>A <code>ModelSerializer</code> is just a regular <code>Serializer</code>, except that: * A set of default fields are automatically populated. * A set of default validators are automatically populated. * Default <code>.create()</code> and <code>.update()</code> implementations are provided. The process of automatically determining a set of serializer fields based on the model fields is reasonably complex, but you almost certainly don&#39;t need to dig into the implementation. If the <code>ModelSerializer</code> class <em>doesn&#39;t</em> generate the set of fields that you need you should either declare the extra/differing fields explicitly on the serializer class, or simply use a <code>Serializer</code> class.</p><h2 id="\u043A\u043B\u0430\u0441\u0441-eduprogrammodelmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduprogrammodelmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduProgramModelMutation</h2><p>Object Type Definition (mutation field) Mutation is a convenience type that helps us build a Field which takes Arguments and returns a mutation Output ObjectType. .. code:: python from graphene import Mutation, ObjectType, String, Boolean, Field class CreatePerson(Mutation): class Arguments: name = String() ok = Boolean() person = Field(Person) def mutate(parent, info, name): person = Person(name=name) ok = True return CreatePerson(person=person, ok=ok) class Mutation(ObjectType): create_person = CreatePerson.Field() Meta class options (optional): output (graphene.ObjectType): Or <code>Output</code> inner class with attributes on Mutation class. Or attributes from Mutation class. Fields which can be returned from this mutation field. resolver (Callable resolver method): Or <code>mutate</code> method on Mutation class. Perform data change and return output. arguments (Dict[str, graphene.Argument]): Or <code>Arguments</code> inner class with attributes on Mutation class. Arguments to use for the mutation Field. name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with the payload object. All fields from interface will be included in this object&#39;s schema. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes or <code>Meta.output</code>).</p><h2 id="\u043A\u043B\u0430\u0441\u0441-eduformmodelmutation" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduformmodelmutation" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduFormModelMutation</h2><p>Object Type Definition (mutation field) Mutation is a convenience type that helps us build a Field which takes Arguments and returns a mutation Output ObjectType. .. code:: python from graphene import Mutation, ObjectType, String, Boolean, Field class CreatePerson(Mutation): class Arguments: name = String() ok = Boolean() person = Field(Person) def mutate(parent, info, name): person = Person(name=name) ok = True return CreatePerson(person=person, ok=ok) class Mutation(ObjectType): create_person = CreatePerson.Field() Meta class options (optional): output (graphene.ObjectType): Or <code>Output</code> inner class with attributes on Mutation class. Or attributes from Mutation class. Fields which can be returned from this mutation field. resolver (Callable resolver method): Or <code>mutate</code> method on Mutation class. Perform data change and return output. arguments (Dict[str, graphene.Argument]): Or <code>Arguments</code> inner class with attributes on Mutation class. Arguments to use for the mutation Field. name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with the payload object. All fields from interface will be included in this object&#39;s schema. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes or <code>Meta.output</code>).</p><h2 id="\u043A\u043B\u0430\u0441\u0441-eduprogramserializer" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduprogramserializer" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduProgramSerializer</h2><p>The BaseSerializer class provides a minimal class which may be used for writing custom serializer implementations. Note that we strongly restrict the ordering of operations/properties that may be used on the serializer in order to enforce correct usage. In particular, if a <code>data=</code> argument is passed then: .is_valid() - Available. .initial_data - Available. .validated_data - Only available after calling <code>is_valid()</code> .errors - Only available after calling <code>is_valid()</code> .data - Only available after calling <code>is_valid()</code> If a <code>data=</code> argument is not passed then: .is_valid() - Not available. .initial_data - Not available. .validated_data - Not available. .errors - Not available. .data - Available.</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">create(self, validated_data)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-eduprogramtestfields" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-eduprogramtestfields" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 EduProgramTestFields</h2><p>\u041F\u0440\u043E\u0432\u0435\u0440\u043A\u0430 \u0440\u0430\u0431\u043E\u0442\u044B SerializerMutation</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-1" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-1" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">test_has_fields(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_has_input_fields(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_exclude_fields(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_mutate_and_get_payload_success(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_mutate_model_and_get_payload_success(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_model_partial_update_mutate_and_get_payload_success(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">test_model_invalid_update_mutate_and_get_payload_success(self)</td><td style="text-align:left;">-</td><td style="text-align:left;">-</td></tr></tbody></table>',19),o=[i];function s(d,n){return t(),a("div",null,o)}var u=e(l,[["render",s],["__file","test_mutations_edu_programs.html.vue"]]);export{u as default};
