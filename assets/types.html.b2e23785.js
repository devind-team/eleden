import{_ as e,o as t,c as i,e as a}from"./app.6fb3dce6.js";const n={},o=a('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-types" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-types" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C types</h1><h2 id="\u043A\u043B\u0430\u0441\u0441-childitemproptype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-childitemproptype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChildItemPropType</h2><p>\u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u044F \u043C\u0435\u0442\u043E\u0434 get_queryset \u042F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0440\u0430\u0431\u043E\u0447\u0435\u0439 \u043A\u043E\u043F\u0438\u0435\u0439 OptimizedDjangoObjectType \u0438\u0437 graphene_django_optimizer</p><h2 id="\u043A\u043B\u0430\u0441\u0441-itemproptype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-itemproptype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ItemPropType</h2><p>\u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u044F \u043C\u0435\u0442\u043E\u0434 get_queryset \u042F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0440\u0430\u0431\u043E\u0447\u0435\u0439 \u043A\u043E\u043F\u0438\u0435\u0439 OptimizedDjangoObjectType \u0438\u0437 graphene_django_optimizer</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">resolve_children( prop: apps.sveden.models.models.ItemProp, info: graphql.execution.base.ResolveInfo, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &quot;resolver_hints(model_field=&#39;childitemprop_set&#39;)&quot;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-itempropcontainertype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-itempropcontainertype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ItemPropContainerType</h2><p>\u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u044F \u043C\u0435\u0442\u043E\u0434 get_queryset \u042F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0440\u0430\u0431\u043E\u0447\u0435\u0439 \u043A\u043E\u043F\u0438\u0435\u0439 OptimizedDjangoObjectType \u0438\u0437 graphene_django_optimizer</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-1" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-1" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">resolve_schema( prop: apps.sveden.models.models.ItemPropContainer, info: graphql.execution.base.ResolveInfo, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &quot;resolver_hints(model_field=&#39;itemprop&#39;)&quot;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-subsectiontype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-subsectiontype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 SubsectionType</h2><p>\u041E\u043F\u0442\u0438\u043C\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u043F\u0440\u043E\u0441\u044B \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u044F\u044F \u043C\u0435\u0442\u043E\u0434 get_queryset \u042F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0440\u0430\u0431\u043E\u0447\u0435\u0439 \u043A\u043E\u043F\u0438\u0435\u0439 OptimizedDjangoObjectType \u0438\u0437 graphene_django_optimizer</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-2" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-2" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">resolve_item_prop_containers( prop: apps.sveden.models.models.Subsection, info: graphql.execution.base.ResolveInfo, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &quot;resolver_hints(model_field=&#39;itempropcontainer_set&#39;)&quot;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-childitempropinputtype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-childitempropinputtype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChildItemPropInputType</h2><p>Input Object Type Definition An input object defines a structured collection of fields which may be supplied to a field argument. Using <code>graphene.NonNull</code> will ensure that a input value must be provided by the query. All class attributes of <code>graphene.InputObjectType</code> are implicitly mounted as InputField using the below Meta class options. .. code:: python from graphene import InputObjectType, String, InputField class Person(InputObjectType): # implicitly mounted as Input Field first_name = String(required=True) # explicitly mounted as Input Field last_name = InputField(String, description=&quot;Surname&quot;) The fields on an input object type can themselves refer to input object types, but you can&#39;t mix input and output types in your schema. Meta class options (optional): name (str): the name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): the description of the GraphQL type in the schema. Defaults to class docstring. container (class): A class reference for a value object that allows for attribute initialization and access. Default InputObjectTypeContainer. fields (Dict[str, graphene.InputField]): Dictionary of field name to InputField. Not recommended to use (prefer class attributes).</p><h2 id="\u043A\u043B\u0430\u0441\u0441-itempropinputtype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-itempropinputtype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ItemPropInputType</h2><p>Input Object Type Definition An input object defines a structured collection of fields which may be supplied to a field argument. Using <code>graphene.NonNull</code> will ensure that a input value must be provided by the query. All class attributes of <code>graphene.InputObjectType</code> are implicitly mounted as InputField using the below Meta class options. .. code:: python from graphene import InputObjectType, String, InputField class Person(InputObjectType): # implicitly mounted as Input Field first_name = String(required=True) # explicitly mounted as Input Field last_name = InputField(String, description=&quot;Surname&quot;) The fields on an input object type can themselves refer to input object types, but you can&#39;t mix input and output types in your schema. Meta class options (optional): name (str): the name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): the description of the GraphQL type in the schema. Defaults to class docstring. container (class): A class reference for a value object that allows for attribute initialization and access. Default InputObjectTypeContainer. fields (Dict[str, graphene.InputField]): Dictionary of field name to InputField. Not recommended to use (prefer class attributes).</p><h2 id="\u043A\u043B\u0430\u0441\u0441-itempropcontainerinputtype" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-itempropcontainerinputtype" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ItemPropContainerInputType</h2><p>Input Object Type Definition An input object defines a structured collection of fields which may be supplied to a field argument. Using <code>graphene.NonNull</code> will ensure that a input value must be provided by the query. All class attributes of <code>graphene.InputObjectType</code> are implicitly mounted as InputField using the below Meta class options. .. code:: python from graphene import InputObjectType, String, InputField class Person(InputObjectType): # implicitly mounted as Input Field first_name = String(required=True) # explicitly mounted as Input Field last_name = InputField(String, description=&quot;Surname&quot;) The fields on an input object type can themselves refer to input object types, but you can&#39;t mix input and output types in your schema. Meta class options (optional): name (str): the name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): the description of the GraphQL type in the schema. Defaults to class docstring. container (class): A class reference for a value object that allows for attribute initialization and access. Default InputObjectTypeContainer. fields (Dict[str, graphene.InputField]): Dictionary of field name to InputField. Not recommended to use (prefer class attributes).</p>',21),r=[o];function s(p,l){return t(),i("div",null,r)}var c=e(n,[["render",s],["__file","types.html.vue"]]);export{c as default};
