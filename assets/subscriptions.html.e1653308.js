import{_ as e,o as t,c as s,e as a}from"./app.6fb3dce6.js";const i={},r=a('<h1 id="\u043C\u043E\u0434\u0443\u043B\u044C-subscriptions" tabindex="-1"><a class="header-anchor" href="#\u043C\u043E\u0434\u0443\u043B\u044C-subscriptions" aria-hidden="true">#</a> \u041C\u043E\u0434\u0443\u043B\u044C subscriptions</h1><h2 id="\u043A\u043B\u0430\u0441\u0441-memberssubscription" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-memberssubscription" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 MembersSubscription</h2><p>\u041F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0447\u0430\u0442\u043E\u0432 - member_id - \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u043E\u0431\u044A\u0435\u043A\u0442\u0430</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">subscribe(root, info, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &quot;register_users(&#39;chatting&#39;)&quot;]</td><td style="text-align:left;">\u0412\u044B\u0431\u0438\u0440\u0430\u0435\u043C \u043A\u0430\u043D\u0430\u043B \u0434\u043B\u044F \u043F\u0440\u043E\u0441\u043B\u0443\u0448\u043A\u0438, \u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C \u0441\u043B\u0435\u0434 \u0432 \u0440\u0435\u0434\u0438\u0441\u0435</td></tr><tr><td style="text-align:left;">unsubscribed(root, info, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;, &quot;register_users(&#39;chatting&#39;, True)&quot;]</td><td style="text-align:left;">\u0423\u0431\u0438\u0440\u0430\u0435\u043C \u0444\u043B\u0430\u0433 \u0438\u0437 \u0440\u0435\u0434\u0438\u0441\u0430 \u0434\u043B\u044F \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439</td></tr><tr><td style="text-align:left;">publish(payload: Dict, info, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;]</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">notify( cls, group_name, action: devind_helpers.schema.types.ConsumerActionType, object_id: int, update: bool = False)</td><td style="text-align:left;">[&#39;classmethod&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-chatmessagessubscription" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-chatmessagessubscription" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 ChatMessagesSubscription</h2><p>\u041F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u043C \u0447\u0430\u0442\u0435</p><h3 id="\u043C\u0435\u0442\u043E\u0434\u044B-1" tabindex="-1"><a class="header-anchor" href="#\u043C\u0435\u0442\u043E\u0434\u044B-1" aria-hidden="true">#</a> \u041C\u0435\u0442\u043E\u0434\u044B</h3><table><thead><tr><th style="text-align:left;">\u0421\u0438\u0433\u043D\u0430\u0442\u0443\u0440\u0430</th><th style="text-align:left;">\u0414\u0435\u043A\u043E\u0440\u0430\u0442\u043E\u0440\u044B</th><th style="text-align:left;">\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435</th></tr></thead><tbody><tr><td style="text-align:left;">subscribe(root, info, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;]</td><td style="text-align:left;">\u041F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u043A\u0430\u043D\u0430\u043B\u044B - messages.{chat_id}.{user_id} - \u043F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0432 \u0447\u0430\u0442\u0435 - messages.{user_id} - \u043F\u043E\u0434\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439 \u043E\u0431\u0449\u0435\u0433\u043E \u0441\u0442\u0440\u043C\u043C\u0438\u043D\u0433\u0430</td></tr><tr><td style="text-align:left;">publish(payload: Dict, info, *args, **kwargs)</td><td style="text-align:left;">[&#39;staticmethod&#39;]</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="\u043A\u043B\u0430\u0441\u0441-messengersubscriptions" tabindex="-1"><a class="header-anchor" href="#\u043A\u043B\u0430\u0441\u0441-messengersubscriptions" aria-hidden="true">#</a> \u041A\u043B\u0430\u0441\u0441 MessengerSubscriptions</h2><p>Object Type Definition Almost all of the GraphQL types you define will be object types. Object types have a name, but most importantly describe their fields. The name of the type defined by an <em>ObjectType</em> defaults to the class name. The type description defaults to the class docstring. This can be overriden by adding attributes to a Meta inner class. The class attributes of an <em>ObjectType</em> are mounted as instances of <code>graphene.Field</code>. Methods starting with <code>resolve_&lt;field_name&gt;</code> are bound as resolvers of the matching Field name. If no resolver is provided, the default resolver is used. Ambiguous types with Interface and Union can be determined through<code>is_type_of</code> method and <code>Meta.possible_types</code> attribute. .. code:: python from graphene import ObjectType, String, Field class Person(ObjectType): class Meta: description = &#39;A human&#39; # implicitly mounted as Field first_name = String() # explicitly mounted as Field last_name = Field(String) def resolve_last_name(parent, info): return last_name ObjectType must be mounted using <code>graphene.Field</code>. .. code:: python from graphene import ObjectType, Field class Query(ObjectType): person = Field(Person, description=&quot;My favorite person&quot;) Meta class options (optional): name (str): Name of the GraphQL type (must be unique in schema). Defaults to class name. description (str): Description of the GraphQL type in the schema. Defaults to class docstring. interfaces (Iterable[graphene.Interface]): GraphQL interfaces to extend with this object. all fields from interface will be included in this object&#39;s schema. possible_types (Iterable[class]): Used to test parent value object via isintance to see if this type can be used to resolve an ambigous type (interface, union). default_resolver (any Callable resolver): Override the default resolver for this type. Defaults to graphene default resolver which returns an attribute or dictionary key with the same name as the field. fields (Dict[str, graphene.Field]): Dictionary of field name to Field. Not recommended to use (prefer class attributes). An <em>ObjectType</em> can be used as a simple value object by creating an instance of the class. .. code:: python p = Person(first_name=&#39;Bob&#39;, last_name=&#39;Roberts&#39;) assert p.first_name == &#39;Bob&#39; Args: *args (List[Any]): Positional values to use for Field values of value object **kwargs (Dict[str: Any]): Keyword arguments to use for Field values of value object</p>',11),n=[r];function o(l,d){return t(),s("div",null,n)}var h=e(i,[["render",o],["__file","subscriptions.html.vue"]]);export{h as default};
